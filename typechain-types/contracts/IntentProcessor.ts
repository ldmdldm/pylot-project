/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IntentProcessorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PYUSD"
      | "crossChainAmounts"
      | "curvePool"
      | "emergencyWithdraw"
      | "hopBridge"
      | "intentStatus"
      | "layerZeroEndpoint"
      | "lzReceive"
      | "owner"
      | "pathOptimizer"
      | "pause"
      | "paused"
      | "pendingCrossChainTx"
      | "poolIds"
      | "processIntent"
      | "processedIntents"
      | "renounceOwnership"
      | "setPoolId"
      | "setProtocolAddresses"
      | "setSupportedChain"
      | "setSupportedDEX"
      | "setTokenIndex"
      | "stargateRouter"
      | "supportedChains"
      | "supportedDEXs"
      | "tokenIndices"
      | "transferOwnership"
      | "uniswapRouter"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeInitiated"
      | "Debug"
      | "IntentCreated"
      | "IntentExecuted"
      | "IntentProcessed"
      | "OptimizationSuggestion"
      | "OwnershipTransferred"
      | "Paused"
      | "SwapCompleted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "PYUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crossChainAmounts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "curvePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "hopBridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "intentStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "layerZeroEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pathOptimizer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingCrossChainTx",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processIntent",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processedIntents",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolAddresses",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedChain",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedDEX",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stargateRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedDEXs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIndices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "PYUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crossChainAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curvePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hopBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "layerZeroEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pathOptimizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingCrossChainTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processedIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stargateRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedDEXs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BridgeInitiatedEvent {
  export type InputTuple = [
    intentId: BytesLike,
    destChain: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    intentId: string,
    destChain: bigint,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    intentId: string;
    destChain: bigint;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugEvent {
  export type InputTuple = [message: string];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentCreatedEvent {
  export type InputTuple = [
    intentId: BytesLike,
    fromToken: AddressLike,
    toToken: AddressLike,
    amount: BigNumberish,
    destChain: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    intentId: string,
    fromToken: string,
    toToken: string,
    amount: bigint,
    destChain: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    intentId: string;
    fromToken: string;
    toToken: string;
    amount: bigint;
    destChain: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentExecutedEvent {
  export type InputTuple = [
    intentId: BytesLike,
    success: boolean,
    gasUsed: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    intentId: string,
    success: boolean,
    gasUsed: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    intentId: string;
    success: boolean;
    gasUsed: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentProcessedEvent {
  export type InputTuple = [
    intentId: BytesLike,
    user: AddressLike,
    amount: BigNumberish,
    success: boolean
  ];
  export type OutputTuple = [
    intentId: string,
    user: string,
    amount: bigint,
    success: boolean
  ];
  export interface OutputObject {
    intentId: string;
    user: string;
    amount: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OptimizationSuggestionEvent {
  export type InputTuple = [
    intentId: BytesLike,
    suggestion: string,
    potentialSavings: BigNumberish
  ];
  export type OutputTuple = [
    intentId: string,
    suggestion: string,
    potentialSavings: bigint
  ];
  export interface OutputObject {
    intentId: string;
    suggestion: string;
    potentialSavings: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapCompletedEvent {
  export type InputTuple = [
    intentId: BytesLike,
    fromToken: AddressLike,
    toToken: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    intentId: string,
    fromToken: string,
    toToken: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    intentId: string;
    fromToken: string;
    toToken: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IntentProcessor extends BaseContract {
  connect(runner?: ContractRunner | null): IntentProcessor;
  waitForDeployment(): Promise<this>;

  interface: IntentProcessorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PYUSD: TypedContractMethod<[], [string], "view">;

  crossChainAmounts: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  curvePool: TypedContractMethod<[], [string], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  hopBridge: TypedContractMethod<[], [string], "view">;

  intentStatus: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  layerZeroEndpoint: TypedContractMethod<[], [string], "view">;

  lzReceive: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pathOptimizer: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingCrossChainTx: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  poolIds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  processIntent: TypedContractMethod<
    [
      intentId: BytesLike,
      fromToken: AddressLike,
      toToken: AddressLike,
      amount: BigNumberish,
      destChain: BigNumberish
    ],
    [void],
    "payable"
  >;

  processedIntents: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPoolId: TypedContractMethod<
    [token: AddressLike, poolId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolAddresses: TypedContractMethod<
    [
      _uniswap: AddressLike,
      _curve: AddressLike,
      _stargate: AddressLike,
      _hop: AddressLike,
      _layerZero: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setSupportedChain: TypedContractMethod<
    [chainId: BigNumberish, supported: boolean],
    [void],
    "nonpayable"
  >;

  setSupportedDEX: TypedContractMethod<
    [dex: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;

  setTokenIndex: TypedContractMethod<
    [token: AddressLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;

  stargateRouter: TypedContractMethod<[], [string], "view">;

  supportedChains: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  supportedDEXs: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  tokenIndices: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapRouter: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PYUSD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "crossChainAmounts"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "curvePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hopBridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "intentStatus"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "layerZeroEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pathOptimizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingCrossChainTx"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "poolIds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "processIntent"
  ): TypedContractMethod<
    [
      intentId: BytesLike,
      fromToken: AddressLike,
      toToken: AddressLike,
      amount: BigNumberish,
      destChain: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "processedIntents"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPoolId"
  ): TypedContractMethod<
    [token: AddressLike, poolId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolAddresses"
  ): TypedContractMethod<
    [
      _uniswap: AddressLike,
      _curve: AddressLike,
      _stargate: AddressLike,
      _hop: AddressLike,
      _layerZero: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupportedChain"
  ): TypedContractMethod<
    [chainId: BigNumberish, supported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupportedDEX"
  ): TypedContractMethod<
    [dex: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenIndex"
  ): TypedContractMethod<
    [token: AddressLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stargateRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportedChains"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportedDEXs"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenIndices"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BridgeInitiated"
  ): TypedContractEvent<
    BridgeInitiatedEvent.InputTuple,
    BridgeInitiatedEvent.OutputTuple,
    BridgeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "Debug"
  ): TypedContractEvent<
    DebugEvent.InputTuple,
    DebugEvent.OutputTuple,
    DebugEvent.OutputObject
  >;
  getEvent(
    key: "IntentCreated"
  ): TypedContractEvent<
    IntentCreatedEvent.InputTuple,
    IntentCreatedEvent.OutputTuple,
    IntentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "IntentExecuted"
  ): TypedContractEvent<
    IntentExecutedEvent.InputTuple,
    IntentExecutedEvent.OutputTuple,
    IntentExecutedEvent.OutputObject
  >;
  getEvent(
    key: "IntentProcessed"
  ): TypedContractEvent<
    IntentProcessedEvent.InputTuple,
    IntentProcessedEvent.OutputTuple,
    IntentProcessedEvent.OutputObject
  >;
  getEvent(
    key: "OptimizationSuggestion"
  ): TypedContractEvent<
    OptimizationSuggestionEvent.InputTuple,
    OptimizationSuggestionEvent.OutputTuple,
    OptimizationSuggestionEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SwapCompleted"
  ): TypedContractEvent<
    SwapCompletedEvent.InputTuple,
    SwapCompletedEvent.OutputTuple,
    SwapCompletedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BridgeInitiated(bytes32,uint16,address,uint256)": TypedContractEvent<
      BridgeInitiatedEvent.InputTuple,
      BridgeInitiatedEvent.OutputTuple,
      BridgeInitiatedEvent.OutputObject
    >;
    BridgeInitiated: TypedContractEvent<
      BridgeInitiatedEvent.InputTuple,
      BridgeInitiatedEvent.OutputTuple,
      BridgeInitiatedEvent.OutputObject
    >;

    "Debug(string)": TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;
    Debug: TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;

    "IntentCreated(bytes32,address,address,uint256,uint16,uint256)": TypedContractEvent<
      IntentCreatedEvent.InputTuple,
      IntentCreatedEvent.OutputTuple,
      IntentCreatedEvent.OutputObject
    >;
    IntentCreated: TypedContractEvent<
      IntentCreatedEvent.InputTuple,
      IntentCreatedEvent.OutputTuple,
      IntentCreatedEvent.OutputObject
    >;

    "IntentExecuted(bytes32,bool,uint256,uint256)": TypedContractEvent<
      IntentExecutedEvent.InputTuple,
      IntentExecutedEvent.OutputTuple,
      IntentExecutedEvent.OutputObject
    >;
    IntentExecuted: TypedContractEvent<
      IntentExecutedEvent.InputTuple,
      IntentExecutedEvent.OutputTuple,
      IntentExecutedEvent.OutputObject
    >;

    "IntentProcessed(bytes32,address,uint256,bool)": TypedContractEvent<
      IntentProcessedEvent.InputTuple,
      IntentProcessedEvent.OutputTuple,
      IntentProcessedEvent.OutputObject
    >;
    IntentProcessed: TypedContractEvent<
      IntentProcessedEvent.InputTuple,
      IntentProcessedEvent.OutputTuple,
      IntentProcessedEvent.OutputObject
    >;

    "OptimizationSuggestion(bytes32,string,uint256)": TypedContractEvent<
      OptimizationSuggestionEvent.InputTuple,
      OptimizationSuggestionEvent.OutputTuple,
      OptimizationSuggestionEvent.OutputObject
    >;
    OptimizationSuggestion: TypedContractEvent<
      OptimizationSuggestionEvent.InputTuple,
      OptimizationSuggestionEvent.OutputTuple,
      OptimizationSuggestionEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SwapCompleted(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      SwapCompletedEvent.InputTuple,
      SwapCompletedEvent.OutputTuple,
      SwapCompletedEvent.OutputObject
    >;
    SwapCompleted: TypedContractEvent<
      SwapCompletedEvent.InputTuple,
      SwapCompletedEvent.OutputTuple,
      SwapCompletedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
